#pragma once

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CGdimotorstatusctrl1 wrapper class

class CGdimotorstatusctrl1 : public CWnd
{
protected:
	DECLARE_DYNCREATE(CGdimotorstatusctrl1)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xFA59A8CA, 0xFAC8, 0x4A3A, { 0x9C, 0xCF, 0x1C, 0xC2, 0x19, 0xC8, 0x40, 0x72 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle,
						const RECT& rect, CWnd* pParentWnd, UINT nID, 
						CCreateContext* pContext = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); 
	}

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, 
				UINT nID, CFile* pPersist = NULL, BOOL bStorage = FALSE,
				BSTR bstrLicKey = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); 
	}

// Attributes
public:


// Operations
public:

// _DGDIMotorStatus

// Functions
//

	void AboutBox()
	{
		InvokeHelper(DISPID_ABOUTBOX, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void SetMotorState(short MotorNum, short State)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x10, DISPATCH_METHOD, VT_EMPTY, NULL, parms, MotorNum, State);
	}
	void UpdateMotorStatus(short Repaint)
	{
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x11, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Repaint);
	}
	short GetMotorState(short MotorNum)
	{
		short result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x12, DISPATCH_METHOD, VT_I2, (void*)&result, parms, MotorNum);
		return result;
	}

// Properties
//

short GetTitleFontSize()
{
	short result;
	GetProperty(0x1, VT_I2, (void*)&result);
	return result;
}
void SetTitleFontSize(short propVal)
{
	SetProperty(0x1, VT_I2, propVal);
}
short GetDoGradientFill()
{
	short result;
	GetProperty(0x2, VT_I2, (void*)&result);
	return result;
}
void SetDoGradientFill(short propVal)
{
	SetProperty(0x2, VT_I2, propVal);
}
short GetHasClientBox()
{
	short result;
	GetProperty(0x3, VT_I2, (void*)&result);
	return result;
}
void SetHasClientBox(short propVal)
{
	SetProperty(0x3, VT_I2, propVal);
}
unsigned long GetTitleTextBackColor()
{
	unsigned long result;
	GetProperty(0x4, VT_UI4, (void*)&result);
	return result;
}
void SetTitleTextBackColor(unsigned long propVal)
{
	SetProperty(0x4, VT_UI4, propVal);
}
unsigned long GetTitleTextColor()
{
	unsigned long result;
	GetProperty(0x5, VT_UI4, (void*)&result);
	return result;
}
void SetTitleTextColor(unsigned long propVal)
{
	SetProperty(0x5, VT_UI4, propVal);
}
CString GetstrTitle()
{
	CString result;
	GetProperty(0x6, VT_BSTR, (void*)&result);
	return result;
}
void SetstrTitle(CString propVal)
{
	SetProperty(0x6, VT_BSTR, propVal);
}
short GetMotorFontSize()
{
	short result;
	GetProperty(0x7, VT_I2, (void*)&result);
	return result;
}
void SetMotorFontSize(short propVal)
{
	SetProperty(0x7, VT_I2, propVal);
}
short GetMotorState()
{
	short result;
	GetProperty(0x8, VT_I2, (void*)&result);
	return result;
}
void SetMotorState(short propVal)
{
	SetProperty(0x8, VT_I2, propVal);
}
short GetTotalMotors()
{
	short result;
	GetProperty(0x9, VT_I2, (void*)&result);
	return result;
}
void SetTotalMotors(short propVal)
{
	SetProperty(0x9, VT_I2, propVal);
}
short GetHasTitle()
{
	short result;
	GetProperty(0xa, VT_I2, (void*)&result);
	return result;
}
void SetHasTitle(short propVal)
{
	SetProperty(0xa, VT_I2, propVal);
}
unsigned long GetMotorTextColor()
{
	unsigned long result;
	GetProperty(0xb, VT_UI4, (void*)&result);
	return result;
}
void SetMotorTextColor(unsigned long propVal)
{
	SetProperty(0xb, VT_UI4, propVal);
}
CString GetMotorName()
{
	CString result;
	GetProperty(0xc, VT_BSTR, (void*)&result);
	return result;
}
void SetMotorName(CString propVal)
{
	SetProperty(0xc, VT_BSTR, propVal);
}
short GetMotorSelect()
{
	short result;
	GetProperty(0xd, VT_I2, (void*)&result);
	return result;
}
void SetMotorSelect(short propVal)
{
	SetProperty(0xd, VT_I2, propVal);
}
short GetMotorNameWidth()
{
	short result;
	GetProperty(0xe, VT_I2, (void*)&result);
	return result;
}
void SetMotorNameWidth(short propVal)
{
	SetProperty(0xe, VT_I2, propVal);
}
short GetMotorStateFontSize()
{
	short result;
	GetProperty(0xf, VT_I2, (void*)&result);
	return result;
}
void SetMotorStateFontSize(short propVal)
{
	SetProperty(0xf, VT_I2, propVal);
}


};
