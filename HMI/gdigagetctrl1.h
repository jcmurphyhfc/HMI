#pragma once

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CGdigagetctrl1 wrapper class

class CGdigagetctrl1 : public CWnd
{
protected:
	DECLARE_DYNCREATE(CGdigagetctrl1)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x2BABD821, 0xFC2F, 0x4E9F, { 0xAE, 0x2E, 0x20, 0xD5, 0x3C, 0x2E, 0xA7, 0x52 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle,
						const RECT& rect, CWnd* pParentWnd, UINT nID, 
						CCreateContext* pContext = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); 
	}

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, 
				UINT nID, CFile* pPersist = NULL, BOOL bStorage = FALSE,
				BSTR bstrLicKey = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); 
	}

// Attributes
public:


// Operations
public:

// _DGDIGaget

// Functions
//

	void AboutBox()
	{
		InvokeHelper(DISPID_ABOUTBOX, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void SetPos(long Pos)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x2, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Pos);
	}
	void SetRange(long Lower, long Upper)
	{
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0x3, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Lower, Upper);
	}

// Properties
//

short GetTitleFontSize()
{
	short result;
	GetProperty(0x1, VT_I2, (void*)&result);
	return result;
}
void SetTitleFontSize(short propVal)
{
	SetProperty(0x1, VT_I2, propVal);
}
short GetDoGradientFill()
{
	short result;
	GetProperty(0x4, VT_I2, (void*)&result);
	return result;
}
void SetDoGradientFill(short propVal)
{
	SetProperty(0x4, VT_I2, propVal);
}
unsigned long GetTitleTextBackColor()
{
	unsigned long result;
	GetProperty(0x5, VT_UI4, (void*)&result);
	return result;
}
void SetTitleTextBackColor(unsigned long propVal)
{
	SetProperty(0x5, VT_UI4, propVal);
}
unsigned long GetTitleTextColor()
{
	unsigned long result;
	GetProperty(0x6, VT_UI4, (void*)&result);
	return result;
}
void SetTitleTextColor(unsigned long propVal)
{
	SetProperty(0x6, VT_UI4, propVal);
}
CString GetTitle()
{
	CString result;
	GetProperty(0x7, VT_BSTR, (void*)&result);
	return result;
}
void SetTitle(CString propVal)
{
	SetProperty(0x7, VT_BSTR, propVal);
}
unsigned long GetTickBackColor()
{
	unsigned long result;
	GetProperty(0x8, VT_UI4, (void*)&result);
	return result;
}
void SetTickBackColor(unsigned long propVal)
{
	SetProperty(0x8, VT_UI4, propVal);
}
unsigned long GetTickColor()
{
	unsigned long result;
	GetProperty(0x9, VT_UI4, (void*)&result);
	return result;
}
void SetTickColor(unsigned long propVal)
{
	SetProperty(0x9, VT_UI4, propVal);
}
short GetTickFontSize()
{
	short result;
	GetProperty(0xa, VT_I2, (void*)&result);
	return result;
}
void SetTickFontSize(short propVal)
{
	SetProperty(0xa, VT_I2, propVal);
}
short GetTickOffset()
{
	short result;
	GetProperty(0xb, VT_I2, (void*)&result);
	return result;
}
void SetTickOffset(short propVal)
{
	SetProperty(0xb, VT_I2, propVal);
}
short GetTickCount()
{
	short result;
	GetProperty(0xc, VT_I2, (void*)&result);
	return result;
}
void SetTickCount(short propVal)
{
	SetProperty(0xc, VT_I2, propVal);
}
CString GetTickUnits()
{
	CString result;
	GetProperty(0xd, VT_BSTR, (void*)&result);
	return result;
}
void SetTickUnits(CString propVal)
{
	SetProperty(0xd, VT_BSTR, propVal);
}


};
