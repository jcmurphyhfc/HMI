#pragma once

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CGDITedit wrapper class

class CGDITedit : public CWnd
{
protected:
	DECLARE_DYNCREATE(CGDITedit)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xFCCCBA48, 0xBCBF, 0x42F9, { 0x9D, 0xA4, 0x7, 0x32, 0x2, 0xAF, 0x82, 0xE8 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle,
						const RECT& rect, CWnd* pParentWnd, UINT nID, 
						CCreateContext* pContext = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); 
	}

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, 
				UINT nID, CFile* pPersist = NULL, BOOL bStorage = FALSE,
				BSTR bstrLicKey = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); 
	}

// Attributes
public:


// Operations
public:

// _DGDITedit

// Functions
//

	void AboutBox()
	{
		InvokeHelper(DISPID_ABOUTBOX, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	double GetValue()
	{
		double result;
		InvokeHelper(0x9, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
		return result;
	}
	void SetValue(double dbValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xa, DISPATCH_METHOD, VT_EMPTY, NULL, parms, dbValue);
	}

// Properties
//

short GetTitleFontSize()
{
	short result;
	GetProperty(0x1, VT_I2, (void*)&result);
	return result;
}
void SetTitleFontSize(short propVal)
{
	SetProperty(0x1, VT_I2, propVal);
}
unsigned long GetTitleTextColor()
{
	unsigned long result;
	GetProperty(0x2, VT_UI4, (void*)&result);
	return result;
}
void SetTitleTextColor(unsigned long propVal)
{
	SetProperty(0x2, VT_UI4, propVal);
}
unsigned long GetTitleBackColor()
{
	unsigned long result;
	GetProperty(0x3, VT_UI4, (void*)&result);
	return result;
}
void SetTitleBackColor(unsigned long propVal)
{
	SetProperty(0x3, VT_UI4, propVal);
}
CString GetTitleText()
{
	CString result;
	GetProperty(0x4, VT_BSTR, (void*)&result);
	return result;
}
void SetTitleText(CString propVal)
{
	SetProperty(0x4, VT_BSTR, propVal);
}
short GetTextFontSize()
{
	short result;
	GetProperty(0x5, VT_I2, (void*)&result);
	return result;
}
void SetTextFontSize(short propVal)
{
	SetProperty(0x5, VT_I2, propVal);
}
unsigned long GetTextColor()
{
	unsigned long result;
	GetProperty(0x6, VT_UI4, (void*)&result);
	return result;
}
void SetTextColor(unsigned long propVal)
{
	SetProperty(0x6, VT_UI4, propVal);
}
unsigned long GetTextBackColor()
{
	unsigned long result;
	GetProperty(0x7, VT_UI4, (void*)&result);
	return result;
}
void SetTextBackColor(unsigned long propVal)
{
	SetProperty(0x7, VT_UI4, propVal);
}
short GetTitleDoGradientFill()
{
	short result;
	GetProperty(0x8, VT_I2, (void*)&result);
	return result;
}
void SetTitleDoGradientFill(short propVal)
{
	SetProperty(0x8, VT_I2, propVal);
}
double GetMinValue()
{
	double result;
	GetProperty(0xb, VT_R8, (void*)&result);
	return result;
}
void SetMinValue(double propVal)
{
	SetProperty(0xb, VT_R8, propVal);
}
double GetMaxValue()
{
	double result;
	GetProperty(0xc, VT_R8, (void*)&result);
	return result;
}
void SetMaxValue(double propVal)
{
	SetProperty(0xc, VT_R8, propVal);
}
short GetWidth()
{
	short result;
	GetProperty(0xd, VT_I2, (void*)&result);
	return result;
}
void SetWidth(short propVal)
{
	SetProperty(0xd, VT_I2, propVal);
}
short GetPrecision()
{
	short result;
	GetProperty(0xe, VT_I2, (void*)&result);
	return result;
}
void SetPrecision(short propVal)
{
	SetProperty(0xe, VT_I2, propVal);
}
CString GetUnits()
{
	CString result;
	GetProperty(0xf, VT_BSTR, (void*)&result);
	return result;
}
void SetUnits(CString propVal)
{
	SetProperty(0xf, VT_BSTR, propVal);
}
short GetHasTitle()
{
	short result;
	GetProperty(0x10, VT_I2, (void*)&result);
	return result;
}
void SetHasTitle(short propVal)
{
	SetProperty(0x10, VT_I2, propVal);
}
short GetEditEnable()
{
	short result;
	GetProperty(0x11, VT_I2, (void*)&result);
	return result;
}
void SetEditEnable(short propVal)
{
	SetProperty(0x11, VT_I2, propVal);
}


};
